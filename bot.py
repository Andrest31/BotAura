import os
import logging
import json
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–±–∞–≤—å—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway)
TOKEN = os.environ.get('TOKEN', '8196025392:AAGhJVa3gLMlnnRQPFywVnUEP-qihiz57uQ')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets
SPREADSHEET_ID = "1e5bOACbvTHXGfihhEGURvVX0AIOBSEOgziAfnQNr-Dc"
async def check_creds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        from google.oauth2 import service_account
        creds = service_account.Credentials.from_service_account_info(
            json.loads(os.environ['SERVICE_ACCOUNT_JSON']),
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        await update.message.reply_text("‚úÖ Google Sheets –¥–æ—Å—Ç—É–ø–µ–Ω!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
def get_sheets_service():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if 'SERVICE_ACCOUNT_JSON' not in os.environ:
            raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SERVICE_ACCOUNT_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ JSON
        sa_json = os.environ['SERVICE_ACCOUNT_JSON']
        if not sa_json.strip().startswith('{'):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SERVICE_ACCOUNT_JSON")
            
        service_account_info = json.loads(sa_json)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ credentials
        creds = Credentials.from_service_account_info(
            service_account_info,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        return build('sheets', 'v4', credentials=creds).spreadsheets()
        
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è SERVICE_ACCOUNT_JSON: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
        raise
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {str(e)}")
        raise

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    SELECTING_ACTION, ADDING_PRODUCT, ADDING_PLAN_QUANTITY,
    ADDING_MADE_QUANTITY, SELECTING_PRODUCT_FOR_PLAN,
    SELECTING_PRODUCT_FOR_MADE, SELECTING_PRODUCT_FOR_DELETE,
    CONFIRMING_DELETE
) = range(8)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return ReplyKeyboardMarkup([
        ["‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç"],
        ["üìù –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω"],
        ["‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"],
        ["üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"]
    ], resize_keyboard=True)

def cancel_keyboard():
    return ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üè≠ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
    return SELECTING_ACTION

async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–∑–¥–µ–ª–∏—è:", reply_markup=cancel_keyboard())
    return ADDING_PRODUCT

async def save_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product_name = update.message.text
    try:
        service = get_sheets_service()
        service.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range="–õ–∏—Å—Ç1!A2:D",
            valueInputOption="USER_ENTERED",
            body={"values": [[product_name, 0, 0, "0%"]]}
        ).execute()
        await update.message.reply_text(f"‚úÖ –ò–∑–¥–µ–ª–∏–µ '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–¥–µ–ª–∏—è", reply_markup=main_keyboard())
    return SELECTING_ACTION

async def select_product(update, context, action: str, next_state: int):
    try:
        service = get_sheets_service()
        result = service.values().get(spreadsheetId=SPREADSHEET_ID, range="–õ–∏—Å—Ç1!A2:D").execute()
        rows = result.get('values', [])
        products = [row[0] for row in rows if row]

        if not products:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∏–∑–¥–µ–ª–∏–π", reply_markup=main_keyboard())
            return SELECTING_ACTION

        context.user_data['all_products_data'] = rows
        context.user_data['available_products'] = products
        context.user_data['action_type'] = action

        keyboard = [[p] for p in products] + [["‚ùå –û—Ç–º–µ–Ω–∞"]]
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {action}:", 
                                      reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return next_state
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–¥–µ–ª–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", reply_markup=main_keyboard())
        return SELECTING_ACTION

async def select_product_for_plan(update, context): 
    return await select_product(update, context, "–ø–ª–∞–Ω–∞", SELECTING_PRODUCT_FOR_PLAN)
    
async def select_product_for_made(update, context): 
    return await select_product(update, context, "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π", SELECTING_PRODUCT_FOR_MADE)

async def handle_quantity_input(update, context, action, column_idx, state):
    text = update.message.text
    if 'selected_product' not in context.user_data:
        if text in context.user_data.get('available_products', []):
            context.user_data['selected_product'] = text
            context.user_data['column_idx'] = column_idx
            await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω–æ: {text}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {action}:", 
                                          reply_markup=cancel_keyboard())
            return state
        else:
            await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=main_keyboard())
            return SELECTING_ACTION

    try:
        quantity = int(text)
        product_name = context.user_data['selected_product']
        column_idx = context.user_data['column_idx']
        rows = context.user_data['all_products_data']

        for i, row in enumerate(rows, start=2):
            if row[0] == product_name:
                service = get_sheets_service()
                current_value = int(row[column_idx]) if len(row) > column_idx and row[column_idx] else 0
                plan_value = int(row[2]) if len(row) > 2 and row[2] else 0

                if column_idx == 1 and (current_value + quantity) > plan_value:
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å {quantity}, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–ª–∞–Ω ({plan_value}). –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ:",
                        reply_markup=cancel_keyboard())
                    return state

                new_value = current_value + quantity
                service.values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f"–õ–∏—Å—Ç1!{chr(65+column_idx)}{i}",
                    valueInputOption="USER_ENTERED",
                    body={"values": [[new_value]]}
                ).execute()

                update_status(service, i)
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} –∫ '{product_name}'", 
                                              reply_markup=main_keyboard())
                clear_context(context)
                return SELECTING_ACTION

        await update.message.reply_text("‚ùå –ò–∑–¥–µ–ª–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard())
        return SELECTING_ACTION

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ", reply_markup=cancel_keyboard())
        return state
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=main_keyboard())
        return SELECTING_ACTION

async def add_plan_quantity(update, context): 
    return await handle_quantity_input(update, context, "–ø–ª–∞–Ω–∞", 2, ADDING_PLAN_QUANTITY)
    
async def add_made_quantity(update, context): 
    return await handle_quantity_input(update, context, "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π", 1, ADDING_MADE_QUANTITY)

def update_status(service, row):
    result = service.values().get(spreadsheetId=SPREADSHEET_ID, range=f"–õ–∏—Å—Ç1!B{row}:C{row}").execute()
    values = result.get('values', [[]])[0]
    made = int(values[0]) if len(values) > 0 and values[0] else 0
    plan = int(values[1]) if len(values) > 1 and values[1] else 0
    percent = f"{round((made/plan)*100)}%" if plan > 0 else "0%"
    service.values().update(
        spreadsheetId=SPREADSHEET_ID,
        range=f"–õ–∏—Å—Ç1!D{row}",
        valueInputOption="USER_ENTERED",
        body={"values": [[percent]]}
    ).execute()

async def show_status(update, context):
    try:
        service = get_sheets_service()
        result = service.values().get(spreadsheetId=SPREADSHEET_ID, range="–õ–∏—Å—Ç1!A2:D").execute()
        rows = result.get('values', [])
        text = "üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:\n\n"
        for row in rows:
            if len(row) >= 4:
                text += f"üîπ {row[0]}\n–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {row[1]}\n–ü–ª–∞–Ω: {row[2]}\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {row[3]}\n\n"
        await update.message.reply_text(text.strip(), reply_markup=main_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_keyboard())
    return SELECTING_ACTION

async def delete_product_start(update, context):
    service = get_sheets_service()
    result = service.values().get(spreadsheetId=SPREADSHEET_ID, range="–õ–∏—Å—Ç1!A2:A").execute()
    products = [row[0] for row in result.get('values', []) if row]
    if not products:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∏–∑–¥–µ–ª–∏–π", reply_markup=main_keyboard())
        return SELECTING_ACTION
    context.user_data['available_products'] = products
    keyboard = [[p] for p in products] + [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", 
                                 reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return SELECTING_PRODUCT_FOR_DELETE

async def confirm_delete_product(update, context):
    product = update.message.text
    if product not in context.user_data.get('available_products', []):
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=main_keyboard())
        return SELECTING_ACTION
    context.user_data['delete_product'] = product
    await update.message.reply_text(f"–£–¥–∞–ª–∏—Ç—å '{product}'?", 
                                  reply_markup=ReplyKeyboardMarkup([["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]], resize_keyboard=True))
    return CONFIRMING_DELETE

async def do_delete_product(update, context):
    if update.message.text == "‚úÖ –î–∞":
        product = context.user_data['delete_product']
        service = get_sheets_service()
        result = service.values().get(spreadsheetId=SPREADSHEET_ID, range="–õ–∏—Å—Ç1!A2:D").execute()
        for i, row in enumerate(result.get('values', []), start=2):
            if row and row[0] == product:
                service.values().clear(spreadsheetId=SPREADSHEET_ID, range=f"–õ–∏—Å—Ç1!A{i}:D{i}").execute()
                await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: {product}", reply_markup=main_keyboard())
                clear_context(context)
                return SELECTING_ACTION
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard())
    else:
        await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
    clear_context(context)
    return SELECTING_ACTION

async def cancel(update, context):
    clear_context(context)
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_keyboard())
    return SELECTING_ACTION

def clear_context(context):
    context.user_data.clear()

async def post_init(application: Application):
    await application.bot.delete_webhook(drop_pending_updates=True)

def main():

    app = Application.builder() \
        .token(TOKEN) \
        .post_init(post_init) \
        .build()
    app.add_handler(CommandHandler('check', check_creds))
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_ACTION: [
                MessageHandler(filters.Regex('^‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç$'), add_product),
                MessageHandler(filters.Regex('^üìù –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω$'), select_product_for_plan),
                MessageHandler(filters.Regex('^‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ$'), select_product_for_made),
                MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞$'), show_status),
                MessageHandler(filters.Regex('^üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç$'), delete_product_start),
            ],
            ADDING_PRODUCT: [
                MessageHandler(filters.TEXT & ~filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), save_product),
                MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            SELECTING_PRODUCT_FOR_PLAN: [
                MessageHandler(filters.TEXT & ~filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), add_plan_quantity),
                MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            SELECTING_PRODUCT_FOR_MADE: [
                MessageHandler(filters.TEXT & ~filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), add_made_quantity),
                MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADDING_PLAN_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), add_plan_quantity),
                MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            ADDING_MADE_QUANTITY: [
                MessageHandler(filters.TEXT & ~filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), add_made_quantity),
                MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            SELECTING_PRODUCT_FOR_DELETE: [
                MessageHandler(filters.TEXT & ~filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), confirm_delete_product),
                MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel),
            ],
            CONFIRMING_DELETE: [
                MessageHandler(filters.Regex('^(‚úÖ –î–∞|‚ùå –ù–µ—Ç)$'), do_delete_product),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv)

    # –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if 'SERVICE_ACCOUNT_JSON' not in os.environ:
        logger.critical("FATAL: SERVICE_ACCOUNT_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        logger.critical("–î–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ Railway: Settings ‚Üí Variables")
        logger.critical(f"–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {list(os.environ.keys())}")
        exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON
    try:
        json.loads(os.environ['SERVICE_ACCOUNT_JSON'])
        logger.info("‚úÖ SERVICE_ACCOUNT_JSON –≤–∞–ª–∏–¥–Ω–∞")
    except json.JSONDecodeError:
        logger.critical("FATAL: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON –≤ SERVICE_ACCOUNT_JSON!")
        exit(1)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()